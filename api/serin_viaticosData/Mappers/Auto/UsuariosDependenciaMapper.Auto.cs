
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is UsuariosDependenciaMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using serin_viaticosRules.Entities;
using serin_viaticosRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace serin_viaticosRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class UsuariosDependenciaMapper : BaseGateway<UsuariosDependencia, UsuariosDependenciaList>, IGenericGateway
    {


        #region "Singleton"

        static UsuariosDependenciaMapper _instance;

        private UsuariosDependenciaMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static UsuariosDependenciaMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new UsuariosDependenciaMapper();
                else {
                    UsuariosDependenciaMapper inst = HttpContext.Current.Items["serin_viaticosRules.UsuariosDependenciaMapperSingleton"] as UsuariosDependenciaMapper;
                    if (inst == null) {
                        inst = new UsuariosDependenciaMapper();
                        HttpContext.Current.Items.Add("serin_viaticosRules.UsuariosDependenciaMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdUsuarioDependencia"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(UsuariosDependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "UsuariosDependencia"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(UsuariosDependenciaMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, UsuariosDependencia entity)
        {
            
            IMappeableUsuariosDependenciaObject UsuariosDependencia = (IMappeableUsuariosDependenciaObject)entity;
            UsuariosDependencia.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(UsuariosDependencia entity)
        {

            IMappeableUsuariosDependenciaObject UsuariosDependencia = (IMappeableUsuariosDependenciaObject)entity;
            return UsuariosDependencia.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(UsuariosDependencia entity)
        {

            IMappeableUsuariosDependenciaObject UsuariosDependencia = (IMappeableUsuariosDependenciaObject)entity;
            return UsuariosDependencia.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(UsuariosDependencia entity)
        {

            IMappeableUsuariosDependenciaObject UsuariosDependencia = (IMappeableUsuariosDependenciaObject)entity;
            return UsuariosDependencia.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(UsuariosDependencia entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableUsuariosDependenciaObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(UsuariosDependencia entity)
        {
            
            ((IMappeableUsuariosDependencia)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a UsuariosDependencia by execute a SQL Query Text
        /// </summary>
        public UsuariosDependencia GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a UsuariosDependenciaList by execute a SQL Query Text
        /// </summary>
        public UsuariosDependenciaList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public UsuariosDependencia GetOne(System.Int32 IdUsuarioDependencia)
        {
            return base.GetOne(new UsuariosDependencia(IdUsuarioDependencia));
        }


        // GetOne By Objects and Params
            


        


        

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdUsuarioDependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "UsuariosDependencia_Delete", IdUsuarioDependencia);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdUsuarioDependencia)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "UsuariosDependencia_Delete", IdUsuarioDependencia);
        }


        // Delete By Objects and Params
            



        


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public UsuariosDependencia GetByUsuarioPadreHijo(System.Int32 IdUsuarioPadre, System.Int32 IdUsuarioHijo) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "UsuariosDependencia_GetByUsuarioPadreHijo" , IdUsuarioPadre, IdUsuarioHijo);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public UsuariosDependencia GetByUsuarioPadreHijo(DbTransaction transaction , System.Int32 IdUsuarioPadre, System.Int32 IdUsuarioHijo) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuariosDependencia_GetByUsuarioPadreHijo" , IdUsuarioPadre, IdUsuarioHijo);
            
        }


        
            

        /// <summary>
        /// 
        /// </summary>
        public UsuariosDependencia GetPadreByHijo(System.Int32 IdUsuarioHijo) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "UsuariosDependencia_GetPadreByHijo" , IdUsuarioHijo);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public UsuariosDependencia GetPadreByHijo(DbTransaction transaction , System.Int32 IdUsuarioHijo) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuariosDependencia_GetPadreByHijo" , IdUsuarioHijo);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace serin_viaticosRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class UsuariosDependenciaMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public serin_viaticosRules.Mappers.UsuariosDependenciaMapper Instance()
        {
            return serin_viaticosRules.Mappers.UsuariosDependenciaMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a UsuariosDependenciaEntity by calling a Stored Procedure
        /// </summary>
        public Entities.UsuariosDependencia GetOne(System.Int32 IdUsuarioDependencia) {
            return Instance().GetOne( IdUsuarioDependencia);
        }

        // GetBy Objects and Params
            

        

       

        /// <summary>
        /// Delete children for UsuariosDependencia
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, UsuariosDependencia entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        
        /// <summary>
        /// Delete UsuariosDependencia 
        /// </summary>
        public void Delete(System.Int32 IdUsuarioDependencia){
            Instance().Delete(IdUsuarioDependencia);
        }

        /// <summary>
        /// Delete UsuariosDependencia 
        /// </summary>
        public void Delete(Entities.UsuariosDependencia entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save UsuariosDependencia  
        /// </summary>
        public void Save(Entities.UsuariosDependencia entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert UsuariosDependencia 
        /// </summary>
        public void Insert(Entities.UsuariosDependencia entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll UsuariosDependencia 
        /// </summary>
        public Entities.UsuariosDependenciaList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save UsuariosDependencia 
        /// </summary>
        public void Save(System.Int32 IdUsuarioDependencia, System.Int32 IdUsuarioPadre, System.Int32 IdUsuarioHijo){
            Entities.UsuariosDependencia entity = Instance().GetOne(IdUsuarioDependencia);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdUsuarioDependencia", IdUsuarioDependencia));

            entity.IdUsuarioPadre = IdUsuarioPadre;
            entity.IdUsuarioHijo = IdUsuarioHijo;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert UsuariosDependencia
        /// </summary>
        public void Insert(System.Int32 IdUsuarioPadre, System.Int32 IdUsuarioHijo){
            Entities.UsuariosDependencia entity = new Entities.UsuariosDependencia();

            entity.IdUsuarioPadre = IdUsuarioPadre;
            entity.IdUsuarioHijo = IdUsuarioHijo;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public UsuariosDependencia GetByUsuarioPadreHijo(System.Int32 IdUsuarioPadre, System.Int32 IdUsuarioHijo) {
            
                return Instance().GetByUsuarioPadreHijo( IdUsuarioPadre, IdUsuarioHijo);
        }


        
            
        /// <summary>
        /// 
        /// </summary>
        public UsuariosDependencia GetPadreByHijo(System.Int32 IdUsuarioHijo) {
            
                return Instance().GetPadreByHijo( IdUsuarioHijo);
        }


        


    }
}





namespace serin_viaticosRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class UsuariosDependenciaLoader<T> : BaseLoader< T, UsuariosDependencia, ObjectList<T>>, IGenericGateway where T : UsuariosDependencia, new()
    {

        #region "Singleton"

        static UsuariosDependenciaLoader<T> _instance;

        private UsuariosDependenciaLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static UsuariosDependenciaLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new UsuariosDependenciaLoader<T>();
                else {
                    UsuariosDependenciaLoader<T> inst = HttpContext.Current.Items["serin_viaticosRules.UsuariosDependenciaLoaderSingleton"] as UsuariosDependenciaLoader<T>;
                    if (inst == null) {
                        inst = new UsuariosDependenciaLoader<T>();
                        HttpContext.Current.Items.Add("serin_viaticosRules.UsuariosDependenciaLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdUsuarioDependencia"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(UsuariosDependencia);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "UsuariosDependencia"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, UsuariosDependencia entity)
        {
            
            IMappeableUsuariosDependenciaObject UsuariosDependencia = (IMappeableUsuariosDependenciaObject)entity;
            UsuariosDependencia.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableUsuariosDependencia)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a UsuariosDependencia by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a UsuariosDependenciaList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdUsuarioDependencia)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "UsuariosDependencia_GetOne", IdUsuarioDependencia);
        }


        // GetOne By Objects and Params
            


        


        

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public T GetByUsuarioPadreHijo(System.Int32 IdUsuarioPadre, System.Int32 IdUsuarioHijo) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "UsuariosDependencia_GetByUsuarioPadreHijo" , IdUsuarioPadre, IdUsuarioHijo);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public T GetByUsuarioPadreHijo(DbTransaction transaction , System.Int32 IdUsuarioPadre, System.Int32 IdUsuarioHijo) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuariosDependencia_GetByUsuarioPadreHijo" , IdUsuarioPadre, IdUsuarioHijo);
            
        }

        
            
        /// <summary>
        /// 
        /// </summary>
        public T GetPadreByHijo(System.Int32 IdUsuarioHijo) {
            
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "UsuariosDependencia_GetPadreByHijo" , IdUsuarioHijo);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public T GetPadreByHijo(DbTransaction transaction , System.Int32 IdUsuarioHijo) {
            
            return base.GetObjectByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "UsuariosDependencia_GetPadreByHijo" , IdUsuarioHijo);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





