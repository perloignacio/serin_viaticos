
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is HotelesMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using serin_viaticosRules.Entities;
using serin_viaticosRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace serin_viaticosRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class HotelesMapper : BaseGateway<Hoteles, HotelesList>, IGenericGateway
    {


        #region "Singleton"

        static HotelesMapper _instance;

        private HotelesMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static HotelesMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new HotelesMapper();
                else {
                    HotelesMapper inst = HttpContext.Current.Items["serin_viaticosRules.HotelesMapperSingleton"] as HotelesMapper;
                    if (inst == null) {
                        inst = new HotelesMapper();
                        HttpContext.Current.Items.Add("serin_viaticosRules.HotelesMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdHotel"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Hoteles);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Hoteles"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(HotelesMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Hoteles entity)
        {
            
            IMappeableHotelesObject Hoteles = (IMappeableHotelesObject)entity;
            Hoteles.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetInt32(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
reader.GetString(5));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(Hoteles entity)
        {

            IMappeableHotelesObject Hoteles = (IMappeableHotelesObject)entity;
            return Hoteles.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(Hoteles entity)
        {

            IMappeableHotelesObject Hoteles = (IMappeableHotelesObject)entity;
            return Hoteles.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(Hoteles entity)
        {

            IMappeableHotelesObject Hoteles = (IMappeableHotelesObject)entity;
            return Hoteles.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Hoteles entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableHotelesObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Hoteles entity)
        {
            Entities.Ubicaciones UbicacionesEntity = null; // Lazy load
            ((IMappeableHoteles)entity).CompleteEntity(UbicacionesEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a Hoteles by execute a SQL Query Text
        /// </summary>
        public Hoteles GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a HotelesList by execute a SQL Query Text
        /// </summary>
        public HotelesList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public Hoteles GetOne(System.Int32 IdHotel)
        {
            return base.GetOne(new Hoteles(IdHotel));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public HotelesList GetByUbicaciones(DbTransaction transaction, System.Int32 IdUbicacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Hoteles_GetByUbicaciones", IdUbicacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public HotelesList GetByUbicaciones(DbTransaction transaction, IUniqueIdentifiable Ubicaciones)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Hoteles_GetByUbicaciones", Ubicaciones.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public HotelesList GetByUbicaciones(System.Int32 IdUbicacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Hoteles_GetByUbicaciones", IdUbicacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public HotelesList GetByUbicaciones(IUniqueIdentifiable Ubicaciones)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Hoteles_GetByUbicaciones", Ubicaciones.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdHotel)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Hoteles_Delete", IdHotel);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdHotel)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Hoteles_Delete", IdHotel);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUbicaciones(System.Int32 IdUbicacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Hoteles_DeleteByUbicaciones", IdUbicacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUbicaciones(DbTransaction transaction, System.Int32 IdUbicacion)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Hoteles_DeleteByUbicaciones", IdUbicacion);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUbicaciones(IUniqueIdentifiable Ubicaciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Hoteles_DeleteByUbicaciones", Ubicaciones.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByUbicaciones(DbTransaction transaction, IUniqueIdentifiable Ubicaciones)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Hoteles_DeleteByUbicaciones", Ubicaciones.Identifier());
        }


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace serin_viaticosRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class HotelesMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public serin_viaticosRules.Mappers.HotelesMapper Instance()
        {
            return serin_viaticosRules.Mappers.HotelesMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a HotelesEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Hoteles GetOne(System.Int32 IdHotel) {
            return Instance().GetOne( IdHotel);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a HotelesList by calling a Stored Procedure
        /// </summary>
        public Entities.HotelesList GetByUbicaciones(System.Int32 IdUbicacion)
        {
            return Instance().GetByUbicaciones(IdUbicacion);
        }

        /// <summary>
        /// Get a HotelesList by calling a Stored Procedure
        /// </summary>
        public Entities.HotelesList GetByUbicaciones(IUniqueIdentifiable Ubicaciones)
        {
            return Instance().GetByUbicaciones(Ubicaciones);
        }

    

       

        /// <summary>
        /// Delete children for Hoteles
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Hoteles entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete Hoteles by Ubicaciones
        /// </summary>
        public void DeleteByUbicaciones(System.Int32 IdUbicacion)
        {
            Instance().DeleteByUbicaciones(IdUbicacion);
        }

        /// <summary>
        /// Delete Hoteles by Ubicaciones
        /// </summary>
        public void DeleteByUbicaciones(IUniqueIdentifiable Ubicaciones)
        {
            Instance().DeleteByUbicaciones(Ubicaciones);
        }

    
        /// <summary>
        /// Delete Hoteles 
        /// </summary>
        public void Delete(System.Int32 IdHotel){
            Instance().Delete(IdHotel);
        }

        /// <summary>
        /// Delete Hoteles 
        /// </summary>
        public void Delete(Entities.Hoteles entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Hoteles  
        /// </summary>
        public void Save(Entities.Hoteles entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Hoteles 
        /// </summary>
        public void Insert(Entities.Hoteles entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll Hoteles 
        /// </summary>
        public Entities.HotelesList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save Hoteles 
        /// </summary>
        public void Save(System.Int32 IdHotel, System.String Nombre, System.Int32 IdUbicacion, System.String Telefono, System.String Email, System.String Direccion){
            Entities.Hoteles entity = Instance().GetOne(IdHotel);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdHotel", IdHotel));

            entity.Nombre = Nombre;
            entity.IdUbicacion = IdUbicacion;
            entity.Telefono = Telefono;
            entity.Email = Email;
            entity.Direccion = Direccion;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Hoteles
        /// </summary>
        public void Insert(System.String Nombre, System.Int32 IdUbicacion, System.String Telefono, System.String Email, System.String Direccion){
            Entities.Hoteles entity = new Entities.Hoteles();

            entity.Nombre = Nombre;
            entity.IdUbicacion = IdUbicacion;
            entity.Telefono = Telefono;
            entity.Email = Email;
            entity.Direccion = Direccion;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace serin_viaticosRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class HotelesLoader<T> : BaseLoader< T, Hoteles, ObjectList<T>>, IGenericGateway where T : Hoteles, new()
    {

        #region "Singleton"

        static HotelesLoader<T> _instance;

        private HotelesLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static HotelesLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new HotelesLoader<T>();
                else {
                    HotelesLoader<T> inst = HttpContext.Current.Items["serin_viaticosRules.HotelesLoaderSingleton"] as HotelesLoader<T>;
                    if (inst == null) {
                        inst = new HotelesLoader<T>();
                        HttpContext.Current.Items.Add("serin_viaticosRules.HotelesLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdHotel"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Hoteles);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Hoteles"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Hoteles entity)
        {
            
            IMappeableHotelesObject Hoteles = (IMappeableHotelesObject)entity;
            Hoteles.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetInt32(2),
(reader.IsDBNull(3)) ? "" : reader.GetString(3),
(reader.IsDBNull(4)) ? "" : reader.GetString(4),
reader.GetString(5));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Entities.Ubicaciones UbicacionesEntity = null; // Lazy load
            ((IMappeableHoteles)entity).CompleteEntity(UbicacionesEntity);
        }


        



        /// <summary>
        /// Get a Hoteles by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a HotelesList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdHotel)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Hoteles_GetOne", IdHotel);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUbicaciones(DbTransaction transaction, System.Int32 IdUbicacion)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Hoteles_GetByUbicaciones", IdUbicacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUbicaciones(DbTransaction transaction, IUniqueIdentifiable Ubicaciones)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Hoteles_GetByUbicaciones", Ubicaciones.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUbicaciones(System.Int32 IdUbicacion)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Hoteles_GetByUbicaciones", IdUbicacion);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUbicaciones(IUniqueIdentifiable Ubicaciones)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Hoteles_GetByUbicaciones", Ubicaciones.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





