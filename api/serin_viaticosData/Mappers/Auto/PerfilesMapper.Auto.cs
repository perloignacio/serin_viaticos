
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is PerfilesMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using serin_viaticosRules.Entities;
using serin_viaticosRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace serin_viaticosRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class PerfilesMapper : BaseGateway<Perfiles, PerfilesList>, IGenericGateway
    {


        #region "Singleton"

        static PerfilesMapper _instance;

        private PerfilesMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PerfilesMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PerfilesMapper();
                else {
                    PerfilesMapper inst = HttpContext.Current.Items["serin_viaticosRules.PerfilesMapperSingleton"] as PerfilesMapper;
                    if (inst == null) {
                        inst = new PerfilesMapper();
                        HttpContext.Current.Items.Add("serin_viaticosRules.PerfilesMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdPerfil"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Perfiles);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Perfiles"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(PerfilesMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Perfiles entity)
        {
            
            IMappeablePerfilesObject Perfiles = (IMappeablePerfilesObject)entity;
            Perfiles.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetBoolean(2),
reader.GetBoolean(3),
reader.GetBoolean(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(Perfiles entity)
        {

            IMappeablePerfilesObject Perfiles = (IMappeablePerfilesObject)entity;
            return Perfiles.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(Perfiles entity)
        {

            IMappeablePerfilesObject Perfiles = (IMappeablePerfilesObject)entity;
            return Perfiles.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(Perfiles entity)
        {

            IMappeablePerfilesObject Perfiles = (IMappeablePerfilesObject)entity;
            return Perfiles.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Perfiles entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeablePerfilesObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Perfiles entity)
        {
            
            ((IMappeablePerfiles)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a Perfiles by execute a SQL Query Text
        /// </summary>
        public Perfiles GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PerfilesList by execute a SQL Query Text
        /// </summary>
        public PerfilesList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public Perfiles GetOne(System.Int32 IdPerfil)
        {
            return base.GetOne(new Perfiles(IdPerfil));
        }


        // GetOne By Objects and Params
            


        


        

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdPerfil)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Perfiles_Delete", IdPerfil);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdPerfil)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Perfiles_Delete", IdPerfil);
        }


        // Delete By Objects and Params
            



        


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace serin_viaticosRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class PerfilesMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public serin_viaticosRules.Mappers.PerfilesMapper Instance()
        {
            return serin_viaticosRules.Mappers.PerfilesMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a PerfilesEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Perfiles GetOne(System.Int32 IdPerfil) {
            return Instance().GetOne( IdPerfil);
        }

        // GetBy Objects and Params
            

        

       

        /// <summary>
        /// Delete children for Perfiles
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Perfiles entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        
        /// <summary>
        /// Delete Perfiles 
        /// </summary>
        public void Delete(System.Int32 IdPerfil){
            Instance().Delete(IdPerfil);
        }

        /// <summary>
        /// Delete Perfiles 
        /// </summary>
        public void Delete(Entities.Perfiles entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Perfiles  
        /// </summary>
        public void Save(Entities.Perfiles entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Perfiles 
        /// </summary>
        public void Insert(Entities.Perfiles entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll Perfiles 
        /// </summary>
        public Entities.PerfilesList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save Perfiles 
        /// </summary>
        public void Save(System.Int32 IdPerfil, System.String Nombre, System.Boolean Activo, System.Boolean RequiereAutorizacion, System.Boolean Admin){
            Entities.Perfiles entity = Instance().GetOne(IdPerfil);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdPerfil", IdPerfil));

            entity.Nombre = Nombre;
            entity.Activo = Activo;
            entity.RequiereAutorizacion = RequiereAutorizacion;
            entity.Admin = Admin;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Perfiles
        /// </summary>
        public void Insert(System.String Nombre, System.Boolean Activo, System.Boolean RequiereAutorizacion, System.Boolean Admin){
            Entities.Perfiles entity = new Entities.Perfiles();

            entity.Nombre = Nombre;
            entity.Activo = Activo;
            entity.RequiereAutorizacion = RequiereAutorizacion;
            entity.Admin = Admin;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace serin_viaticosRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class PerfilesLoader<T> : BaseLoader< T, Perfiles, ObjectList<T>>, IGenericGateway where T : Perfiles, new()
    {

        #region "Singleton"

        static PerfilesLoader<T> _instance;

        private PerfilesLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PerfilesLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PerfilesLoader<T>();
                else {
                    PerfilesLoader<T> inst = HttpContext.Current.Items["serin_viaticosRules.PerfilesLoaderSingleton"] as PerfilesLoader<T>;
                    if (inst == null) {
                        inst = new PerfilesLoader<T>();
                        HttpContext.Current.Items.Add("serin_viaticosRules.PerfilesLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdPerfil"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Perfiles);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Perfiles"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Perfiles entity)
        {
            
            IMappeablePerfilesObject Perfiles = (IMappeablePerfilesObject)entity;
            Perfiles.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetBoolean(2),
reader.GetBoolean(3),
reader.GetBoolean(4));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeablePerfiles)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a Perfiles by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PerfilesList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdPerfil)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Perfiles_GetOne", IdPerfil);
        }


        // GetOne By Objects and Params
            


        


        

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





