
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is PerfilesUsuariosMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using serin_viaticosRules.Entities;
using serin_viaticosRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace serin_viaticosRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class PerfilesUsuariosMapper : BaseGateway<PerfilesUsuarios, PerfilesUsuariosList>, IGenericGateway
    {


        #region "Singleton"

        static PerfilesUsuariosMapper _instance;

        private PerfilesUsuariosMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PerfilesUsuariosMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PerfilesUsuariosMapper();
                else {
                    PerfilesUsuariosMapper inst = HttpContext.Current.Items["serin_viaticosRules.PerfilesUsuariosMapperSingleton"] as PerfilesUsuariosMapper;
                    if (inst == null) {
                        inst = new PerfilesUsuariosMapper();
                        HttpContext.Current.Items.Add("serin_viaticosRules.PerfilesUsuariosMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdUsuarioPerfil"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(PerfilesUsuarios);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "PerfilesUsuarios"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(PerfilesUsuariosMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PerfilesUsuarios entity)
        {
            
            IMappeablePerfilesUsuariosObject PerfilesUsuarios = (IMappeablePerfilesUsuariosObject)entity;
            PerfilesUsuarios.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(PerfilesUsuarios entity)
        {

            IMappeablePerfilesUsuariosObject PerfilesUsuarios = (IMappeablePerfilesUsuariosObject)entity;
            return PerfilesUsuarios.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(PerfilesUsuarios entity)
        {

            IMappeablePerfilesUsuariosObject PerfilesUsuarios = (IMappeablePerfilesUsuariosObject)entity;
            return PerfilesUsuarios.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(PerfilesUsuarios entity)
        {

            IMappeablePerfilesUsuariosObject PerfilesUsuarios = (IMappeablePerfilesUsuariosObject)entity;
            return PerfilesUsuarios.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(PerfilesUsuarios entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeablePerfilesUsuariosObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(PerfilesUsuarios entity)
        {
            Objects.PerfilesObject PerfilesEntity = null; // Lazy load
            ((IMappeablePerfilesUsuarios)entity).CompleteEntity(PerfilesEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a PerfilesUsuarios by execute a SQL Query Text
        /// </summary>
        public PerfilesUsuarios GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PerfilesUsuariosList by execute a SQL Query Text
        /// </summary>
        public PerfilesUsuariosList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public PerfilesUsuarios GetOne(System.Int32 IdUsuario)
        {
            return base.GetOne(new PerfilesUsuarios(IdUsuario));
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public PerfilesUsuariosList GetByPerfiles(DbTransaction transaction, System.Int32 IdPerfil)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_GetByPerfiles", IdPerfil);
        }

        /// <summary>
        /// 
        /// </summary>
        public PerfilesUsuariosList GetByPerfiles(DbTransaction transaction, IUniqueIdentifiable Perfiles)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_GetByPerfiles", Perfiles.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public PerfilesUsuariosList GetByPerfiles(System.Int32 IdPerfil)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_GetByPerfiles", IdPerfil);
        }

        /// <summary>
        /// 
        /// </summary>
        public PerfilesUsuariosList GetByPerfiles(IUniqueIdentifiable Perfiles)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_GetByPerfiles", Perfiles.Identifier());
        }

    

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdUsuarioPerfil)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_Delete", IdUsuarioPerfil);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdUsuarioPerfil)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_Delete", IdUsuarioPerfil);
        }


        // Delete By Objects and Params
            



        

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPerfiles(System.Int32 IdPerfil)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_DeleteByPerfiles", IdPerfil);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPerfiles(DbTransaction transaction, System.Int32 IdPerfil)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_DeleteByPerfiles", IdPerfil);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPerfiles(IUniqueIdentifiable Perfiles)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_DeleteByPerfiles", Perfiles.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByPerfiles(DbTransaction transaction, IUniqueIdentifiable Perfiles)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_DeleteByPerfiles", Perfiles.Identifier());
        }


    


        //Database Queries 
        
            

        /// <summary>
        /// 
        /// </summary>
        public PerfilesUsuariosList GetByUsuario(System.Int32 IdUsuario) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_GetByUsuario" , IdUsuario);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public PerfilesUsuariosList GetByUsuario(DbTransaction transaction , System.Int32 IdUsuario) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_GetByUsuario" , IdUsuario);
            
        }


        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace serin_viaticosRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class PerfilesUsuariosMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public serin_viaticosRules.Mappers.PerfilesUsuariosMapper Instance()
        {
            return serin_viaticosRules.Mappers.PerfilesUsuariosMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a PerfilesUsuariosEntity by calling a Stored Procedure
        /// </summary>
        public Entities.PerfilesUsuarios GetOne(System.Int32 IdUsuario) {
            return Instance().GetOne( IdUsuario);
        }

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a PerfilesUsuariosList by calling a Stored Procedure
        /// </summary>
        public Entities.PerfilesUsuariosList GetByPerfiles(System.Int32 IdPerfil)
        {
            return Instance().GetByPerfiles(IdPerfil);
        }

        /// <summary>
        /// Get a PerfilesUsuariosList by calling a Stored Procedure
        /// </summary>
        public Entities.PerfilesUsuariosList GetByPerfiles(IUniqueIdentifiable Perfiles)
        {
            return Instance().GetByPerfiles(Perfiles);
        }

    

       

        /// <summary>
        /// Delete children for PerfilesUsuarios
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, PerfilesUsuarios entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete PerfilesUsuarios by Perfiles
        /// </summary>
        public void DeleteByPerfiles(System.Int32 IdPerfil)
        {
            Instance().DeleteByPerfiles(IdPerfil);
        }

        /// <summary>
        /// Delete PerfilesUsuarios by Perfiles
        /// </summary>
        public void DeleteByPerfiles(IUniqueIdentifiable Perfiles)
        {
            Instance().DeleteByPerfiles(Perfiles);
        }

    
        /// <summary>
        /// Delete PerfilesUsuarios 
        /// </summary>
        public void Delete(System.Int32 IdUsuarioPerfil){
            Instance().Delete(IdUsuarioPerfil);
        }

        /// <summary>
        /// Delete PerfilesUsuarios 
        /// </summary>
        public void Delete(Entities.PerfilesUsuarios entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save PerfilesUsuarios  
        /// </summary>
        public void Save(Entities.PerfilesUsuarios entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert PerfilesUsuarios 
        /// </summary>
        public void Insert(Entities.PerfilesUsuarios entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll PerfilesUsuarios 
        /// </summary>
        public Entities.PerfilesUsuariosList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save PerfilesUsuarios 
        /// </summary>
        public void Save(System.Int32 IdUsuarioPerfil, System.Int32 IdUsuario, System.Int32 IdPerfil){
            Entities.PerfilesUsuarios entity = Instance().GetOne(IdUsuarioPerfil);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdUsuarioPerfil", IdUsuarioPerfil));

            entity.IdUsuario = IdUsuario;
            entity.IdPerfil = IdPerfil;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert PerfilesUsuarios
        /// </summary>
        public void Insert(System.Int32 IdUsuario, System.Int32 IdPerfil){
            Entities.PerfilesUsuarios entity = new Entities.PerfilesUsuarios();

            entity.IdUsuario = IdUsuario;
            entity.IdPerfil = IdPerfil;
            Instance().Insert(entity);
        }


        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public PerfilesUsuariosList GetByUsuario(System.Int32 IdUsuario) {
            
                return Instance().GetByUsuario( IdUsuario);
        }


        


    }
}





namespace serin_viaticosRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class PerfilesUsuariosLoader<T> : BaseLoader< T, PerfilesUsuarios, ObjectList<T>>, IGenericGateway where T : PerfilesUsuarios, new()
    {

        #region "Singleton"

        static PerfilesUsuariosLoader<T> _instance;

        private PerfilesUsuariosLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static PerfilesUsuariosLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new PerfilesUsuariosLoader<T>();
                else {
                    PerfilesUsuariosLoader<T> inst = HttpContext.Current.Items["serin_viaticosRules.PerfilesUsuariosLoaderSingleton"] as PerfilesUsuariosLoader<T>;
                    if (inst == null) {
                        inst = new PerfilesUsuariosLoader<T>();
                        HttpContext.Current.Items.Add("serin_viaticosRules.PerfilesUsuariosLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdUsuarioPerfil"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(PerfilesUsuarios);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "PerfilesUsuarios"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, PerfilesUsuarios entity)
        {
            
            IMappeablePerfilesUsuariosObject PerfilesUsuarios = (IMappeablePerfilesUsuariosObject)entity;
            PerfilesUsuarios.HydrateFields(
            reader.GetInt32(0),
reader.GetInt32(1),
reader.GetInt32(2));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.PerfilesObject PerfilesEntity = null; // Lazy load
            ((IMappeablePerfilesUsuarios)entity).CompleteEntity(PerfilesEntity);
        }


        



        /// <summary>
        /// Get a PerfilesUsuarios by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a PerfilesUsuariosList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdUsuario)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_GetOne", IdUsuario);
        }


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPerfiles(DbTransaction transaction, System.Int32 IdPerfil)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_GetByPerfiles", IdPerfil);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPerfiles(DbTransaction transaction, IUniqueIdentifiable Perfiles)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_GetByPerfiles", Perfiles.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPerfiles(System.Int32 IdPerfil)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_GetByPerfiles", IdPerfil);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByPerfiles(IUniqueIdentifiable Perfiles)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_GetByPerfiles", Perfiles.Identifier());
        }

    

        //Database Queries 
        
            
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUsuario(System.Int32 IdUsuario) {
            
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "PerfilesUsuarios_GetByUsuario" , IdUsuario);
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByUsuario(DbTransaction transaction , System.Int32 IdUsuario) {
            
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "PerfilesUsuarios_GetByUsuario" , IdUsuario);
            
        }

        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





