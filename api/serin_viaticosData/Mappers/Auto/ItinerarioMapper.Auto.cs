
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ItinerarioMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using serin_viaticosRules.Entities;
using serin_viaticosRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace serin_viaticosRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class ItinerarioMapper : BaseGateway<Itinerario, ItinerarioList>, IGenericGateway
    {


        #region "Singleton"

        static ItinerarioMapper _instance;

        private ItinerarioMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ItinerarioMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ItinerarioMapper();
                else {
                    ItinerarioMapper inst = HttpContext.Current.Items["serin_viaticosRules.ItinerarioMapperSingleton"] as ItinerarioMapper;
                    if (inst == null) {
                        inst = new ItinerarioMapper();
                        HttpContext.Current.Items.Add("serin_viaticosRules.ItinerarioMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdItinerario"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Itinerario);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Itinerario"; }
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(ItinerarioMapper).FullName;}
        }


        

        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Itinerario entity)
        {
            
            IMappeableItinerarioObject Itinerario = (IMappeableItinerarioObject)entity;
            Itinerario.HydrateFields(
            reader.GetInt32(0),
reader.GetDateTime(1),
reader.GetBoolean(2));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForInsert(Itinerario entity)
        {

            IMappeableItinerarioObject Itinerario = (IMappeableItinerarioObject)entity;
            return Itinerario.GetFieldsForInsert();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForUpdate(Itinerario entity)
        {

            IMappeableItinerarioObject Itinerario = (IMappeableItinerarioObject)entity;
            return Itinerario.GetFieldsForUpdate();
        }

        /// <summary>
        /// 
        /// </summary>
        protected override object[] GetFieldsForDelete(Itinerario entity)
        {

            IMappeableItinerarioObject Itinerario = (IMappeableItinerarioObject)entity;
            return Itinerario.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Itinerario entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableItinerarioObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Itinerario entity)
        {
            
            ((IMappeableItinerario)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          





        /// <summary>
        /// Get a Itinerario by execute a SQL Query Text
        /// </summary>
        public Itinerario GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ItinerarioList by execute a SQL Query Text
        /// </summary>
        public ItinerarioList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// 
        /// </summary>
        public Itinerario GetOne(System.Int32 IdItinerario)
        {
            return base.GetOne(new Itinerario(IdItinerario));
        }


        // GetOne By Objects and Params
            


        


        

        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 IdItinerario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Itinerario_Delete", IdItinerario);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 IdItinerario)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Itinerario_Delete", IdItinerario);
        }


        // Delete By Objects and Params
            



        


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace serin_viaticosRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public class ItinerarioMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public serin_viaticosRules.Mappers.ItinerarioMapper Instance()
        {
            return serin_viaticosRules.Mappers.ItinerarioMapper.Instance(); 
        }
        
        /// <summary>
        /// Get a ItinerarioEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Itinerario GetOne(System.Int32 IdItinerario) {
            return Instance().GetOne( IdItinerario);
        }

        // GetBy Objects and Params
            

        

       

        /// <summary>
        /// Delete children for Itinerario
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Itinerario entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        
        /// <summary>
        /// Delete Itinerario 
        /// </summary>
        public void Delete(System.Int32 IdItinerario){
            Instance().Delete(IdItinerario);
        }

        /// <summary>
        /// Delete Itinerario 
        /// </summary>
        public void Delete(Entities.Itinerario entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Itinerario  
        /// </summary>
        public void Save(Entities.Itinerario entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Itinerario 
        /// </summary>
        public void Insert(Entities.Itinerario entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// GetAll Itinerario 
        /// </summary>
        public Entities.ItinerarioList GetAll(){  
            return Instance().GetAll();
        }

        /// <summary>
        /// Save Itinerario 
        /// </summary>
        public void Save(System.Int32 IdItinerario, System.DateTime Fecha, System.Boolean IdaVuelta){
            Entities.Itinerario entity = Instance().GetOne(IdItinerario);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "IdItinerario", IdItinerario));

            entity.Fecha = Fecha;
            entity.IdaVuelta = IdaVuelta;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Itinerario
        /// </summary>
        public void Insert(System.DateTime Fecha, System.Boolean IdaVuelta){
            Entities.Itinerario entity = new Entities.Itinerario();

            entity.Fecha = Fecha;
            entity.IdaVuelta = IdaVuelta;
            Instance().Insert(entity);
        }


        //Database Queries 
        


    }
}





namespace serin_viaticosRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ItinerarioLoader<T> : BaseLoader< T, Itinerario, ObjectList<T>>, IGenericGateway where T : Itinerario, new()
    {

        #region "Singleton"

        static ItinerarioLoader<T> _instance;

        private ItinerarioLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static ItinerarioLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new ItinerarioLoader<T>();
                else {
                    ItinerarioLoader<T> inst = HttpContext.Current.Items["serin_viaticosRules.ItinerarioLoaderSingleton"] as ItinerarioLoader<T>;
                    if (inst == null) {
                        inst = new ItinerarioLoader<T>();
                        HttpContext.Current.Items.Add("serin_viaticosRules.ItinerarioLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"IdItinerario"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Itinerario);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Itinerario"; }
        }

        
        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Itinerario entity)
        {
            
            IMappeableItinerarioObject Itinerario = (IMappeableItinerarioObject)entity;
            Itinerario.HydrateFields(
            reader.GetInt32(0),
reader.GetDateTime(1),
reader.GetBoolean(2));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableItinerario)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a Itinerario by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a ItinerarioList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 IdItinerario)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Itinerario_GetOne", IdItinerario);
        }


        // GetOne By Objects and Params
            


        


        

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





