
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ItinerarioDetalleObject.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using Cooperator.Framework.Core;
using System;

namespace serin_viaticosRules.Objects
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ItinerarioDetalleObject : BaseObject, IMappeableItinerarioDetalleObject, IUniqueIdentifiable, IEquatable<ItinerarioDetalleObject>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public ItinerarioDetalleObject(): base()
        {

			_IdItinerarioDetalle =  ValuesGenerator.GetInt32;

        }

        /// <summary>
        /// 
        /// </summary>
        public ItinerarioDetalleObject(
			System.Int32 IdItinerarioDetalle): base()
        {

			_IdItinerarioDetalle = IdItinerarioDetalle;

            Initialized();
        }

        

        #endregion

        #region "Events"
        
        
        #endregion

        #region "Fields"

            /// <summary>
/// 
/// </summary>
protected System.Int32 _IdItinerarioDetalle;
/// <summary>
/// 
/// </summary>
protected System.Int32 _IdItinerario;
/// <summary>
/// 
/// </summary>
protected System.Int32 _IdParada;

        #endregion

        #region "Properties"
        
        /// <summary>
        /// 
        /// </summary>
        public virtual System.Int32 IdItinerarioDetalle
        {
            get
            {
                return _IdItinerarioDetalle;
            }
            
        }
        
        /// <summary>
        /// 
        /// </summary>
        public virtual System.Int32 IdItinerario
        {
            get
            {
                return _IdItinerario;
            }
            
            set
            {
                base.PropertyModified();
                _IdItinerario = value;
                
            }
            
        }
        
        /// <summary>
        /// 
        /// </summary>
        public virtual System.Int32 IdParada
        {
            get
            {
                return _IdParada;
            }
            
            set
            {
                base.PropertyModified();
                _IdParada = value;
                
            }
            
        }
        
        #endregion

        
            
                
        /// <summary>
        /// 
        /// </summary>
        protected override void SetOriginalValue()
        {
            base._OriginalValue = (IObject) this.MemberwiseClone();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            ItinerarioDetalleObject newObject;
            ItinerarioDetalleObject newOriginalValue;

            newObject = (ItinerarioDetalleObject) this.MemberwiseClone();
            if (base._OriginalValue != null)
            {
                newOriginalValue = (ItinerarioDetalleObject)this.OriginalValue().MemberwiseClone();
                newObject._OriginalValue = newOriginalValue;
            }
            return newObject;
        }


        /// <summary>
        /// Returns de original value of object since was created or restored.
        /// </summary>
        public new ItinerarioDetalleObject OriginalValue()
        {
            return (ItinerarioDetalleObject)base.OriginalValue();
        }


        /// <summary>
        /// 
        /// </summary>
        void IMappeableItinerarioDetalleObject.HydrateFields(
			System.Int32 IdItinerarioDetalle,
			System.Int32 IdItinerario,
			System.Int32 IdParada)
        {
        _IdItinerarioDetalle = IdItinerarioDetalle;
_IdItinerario = IdItinerario;
_IdParada = IdParada;
        }

        /// <summary>
        /// 
        /// </summary>
        object[] IMappeableItinerarioDetalleObject.GetFieldsForInsert()
        {
            object[] _myArray = new object[3];
            _myArray[0] = _IdItinerarioDetalle;
_myArray[1] = _IdItinerario;
_myArray[2] = _IdParada;

            return _myArray;
        }

        /// <summary>
        /// 
        /// </summary>
        object[] IMappeableItinerarioDetalleObject.GetFieldsForUpdate()
        {
            
            object[] _myArray = new object[3];
            _myArray[0] = _IdItinerarioDetalle;
_myArray[1] = _IdItinerario;
_myArray[2] = _IdParada;

            return _myArray;
        }

        /// <summary>
        /// 
        /// </summary>
        object[] IMappeableItinerarioDetalleObject.GetFieldsForDelete()
        {
            
            object[] _myArray = new object[1];
            _myArray[0] = _IdItinerarioDetalle;

            return _myArray;
        }


        /// <summary>
        /// 
        /// </summary>
        void IMappeableItinerarioDetalleObject.UpdateObjectFromOutputParams(object[] parameters){
            // Update properties from Output parameters
            _IdItinerarioDetalle = (System.Int32) parameters[0];

        }


        /// <summary>
        /// 
        /// </summary>
        object[] IUniqueIdentifiable.Identifier()
        {
            ItinerarioDetalleObject o = null;
            if (ObjectStateHelper.IsModified(this))
                o = this.OriginalValue();
            else
                o = this;

            return new object[]
            {o.IdItinerarioDetalle};
        }


        /// <summary>
        /// 
        /// </summary>
        public bool Equals(ItinerarioDetalleObject other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        }

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableItinerarioDetalleObject
    {
        /// <summary>
        /// 
        /// </summary>
        void HydrateFields(System.Int32 IdItinerarioDetalle, 
			System.Int32 IdItinerario, 
			System.Int32 IdParada);

        /// <summary>
        /// 
        /// </summary>
        object[] GetFieldsForInsert();

        /// <summary>
        /// 
        /// </summary>
        object[] GetFieldsForUpdate();

        /// <summary>
        /// 
        /// </summary>
        object[] GetFieldsForDelete();

        /// <summary>
        /// 
        /// </summary>
        void UpdateObjectFromOutputParams(object[] parameters);
    }

    /// <summary>
    /// 
    /// </summary>
    public partial class ItinerarioDetalleObjectList : ObjectList<ItinerarioDetalleObject>
    {
    }
}

namespace serin_viaticosRules.Views
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ItinerarioDetalleObjectListView
        : ObjectListView<Objects.ItinerarioDetalleObject>
    {
        /// <summary>
        /// 
        /// </summary>
        public ItinerarioDetalleObjectListView(Objects.ItinerarioDetalleObjectList list): base(list)
        {
        }
    }
}


