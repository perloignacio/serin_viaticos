
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is ItinerarioDetalleEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using serin_viaticosRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace serin_viaticosRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class ItinerarioDetalle : Objects.ItinerarioDetalleObject, IMappeableItinerarioDetalle, IEquatable<ItinerarioDetalle>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public ItinerarioDetalle()
            :base()
        {
            if (_ItinerarioEntity == null) _ItinerarioEntity = new Entities.Itinerario();
if (_UbicacionesEntity == null) _UbicacionesEntity = new Entities.Ubicaciones();

        }

        /// <summary>
        /// 
        /// </summary>
        public ItinerarioDetalle(
			System.Int32 IdItinerarioDetalle)
            : base()
        {

			_IdItinerarioDetalle = IdItinerarioDetalle;

            if (_ItinerarioEntity == null) _ItinerarioEntity = new Entities.Itinerario();
if (_UbicacionesEntity == null) _UbicacionesEntity = new Entities.Ubicaciones();

            Initialized();
        }

        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.Itinerario _ItinerarioEntity;
/// <summary>
/// 
/// </summary>
protected Entities.Ubicaciones _UbicacionesEntity;

        #endregion

        #region "Properties"
        
bool _ItinerarioEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Itinerario ItinerarioEntity
        {
            get
            {
                if (_ItinerarioEntity== null  && ! _ItinerarioEntityFetched ) {
_ItinerarioEntityFetched = true;
Entities.Itinerario _ItinerarioEntityTemp = new Entities.Itinerario(this.IdItinerario); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Itinerario));
 _ItinerarioEntity = lazyProvider.GetEntity(typeof(Entities.Itinerario), _ItinerarioEntityTemp) as Entities.Itinerario;
}

                return _ItinerarioEntity;
            }
            set
            {
                base.PropertyModified();
                _ItinerarioEntity = value;
                if (value != null) {
   _IdItinerario = value.IdItinerario;

} else {
   _IdItinerario = System.Int32.MinValue;

}

            }
        }
        
bool _UbicacionesEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Ubicaciones UbicacionesEntity
        {
            get
            {
                if (_UbicacionesEntity== null  && ! _UbicacionesEntityFetched ) {
_UbicacionesEntityFetched = true;
Entities.Ubicaciones _UbicacionesEntityTemp = new Entities.Ubicaciones(this.IdParada); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Ubicaciones));
 _UbicacionesEntity = lazyProvider.GetEntity(typeof(Entities.Ubicaciones), _UbicacionesEntityTemp) as Entities.Ubicaciones;
}

                return _UbicacionesEntity;
            }
            set
            {
                base.PropertyModified();
                _UbicacionesEntity = value;
                if (value != null) {
   _IdParada = value.IdUbicacion;

} else {
   _IdParada = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new ItinerarioDetalle OriginalValue()
        {
            return (ItinerarioDetalle)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            ItinerarioDetalle newObject;            
            

            newObject = (ItinerarioDetalle)this.MemberwiseClone();
            // Entities
                         
            if (this._ItinerarioEntity != null)
            {
                newObject._ItinerarioEntity = (Entities.Itinerario)((ICloneable)this._ItinerarioEntity).Clone();
            }
                         
            if (this._UbicacionesEntity != null)
            {
                newObject._UbicacionesEntity = (Entities.Ubicaciones)((ICloneable)this._UbicacionesEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            ItinerarioDetalle newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (ItinerarioDetalle)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._ItinerarioEntity != null)
                {
                    newOriginalValue._ItinerarioEntity = (Entities.Itinerario)((ICloneable)this.OriginalValue()._ItinerarioEntity).Clone();
                }
                             
                if (this.OriginalValue()._UbicacionesEntity != null)
                {
                    newOriginalValue._UbicacionesEntity = (Entities.Ubicaciones)((ICloneable)this.OriginalValue()._UbicacionesEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableItinerarioDetalle.CompleteEntity(Entities.Itinerario ItinerarioEntity, Entities.Ubicaciones UbicacionesEntity)
        {
        _ItinerarioEntity = ItinerarioEntity;
_UbicacionesEntity = UbicacionesEntity;
        }
        
        bool IMappeableItinerarioDetalle.IsItinerarioEntityNull()
        {
            return (_ItinerarioEntity == null);
        }
        
        bool IMappeableItinerarioDetalle.IsUbicacionesEntityNull()
        {
            return (_UbicacionesEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableItinerarioDetalle.SetFKValuesForChilds(ItinerarioDetalle entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(ItinerarioDetalle other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableItinerarioDetalle
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.Itinerario ItinerarioEntity, Entities.Ubicaciones UbicacionesEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsItinerarioEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsUbicacionesEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(ItinerarioDetalle entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class ItinerarioDetalleList : ObjectList<ItinerarioDetalle>
    {
    }
}
namespace serin_viaticosRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class ItinerarioDetalleListView
        : ObjectListView<Entities.ItinerarioDetalle>
    {
        /// <summary>
        /// 
        /// </summary>
        public ItinerarioDetalleListView(Entities.ItinerarioDetalleList list): base(list)
        {
        }
    }
}


