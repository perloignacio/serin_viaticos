
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.2.0
// Created: 
// This is a partial class file. The other one is SolicitudesDetalleEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using serin_viaticosRules.Objects;



using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace serin_viaticosRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class SolicitudesDetalle : Objects.SolicitudesDetalleObject, IMappeableSolicitudesDetalle, IEquatable<SolicitudesDetalle>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public SolicitudesDetalle()
            :base()
        {
            if (_SolicitudesEntity == null) _SolicitudesEntity = new Entities.Solicitudes();
if (_SolicitudesCategoriasEntity == null) _SolicitudesCategoriasEntity = new Entities.SolicitudesCategorias();

        }

        /// <summary>
        /// 
        /// </summary>
        public SolicitudesDetalle(
			System.Int32 IdSolicitudDetalle)
            : base()
        {

			_IdSolicitudDetalle = IdSolicitudDetalle;

            if (_SolicitudesEntity == null) _SolicitudesEntity = new Entities.Solicitudes();
if (_SolicitudesCategoriasEntity == null) _SolicitudesCategoriasEntity = new Entities.SolicitudesCategorias();

            Initialized();
        }

        

        /// <summary>
        /// 
        /// </summary>
        public SolicitudesDetalle(
			System.Int32 IdSolicitudDetalle,
			System.Int32 IdSolicitud,
			System.Int32 IdSolicitudCategoria,
			System.Nullable<System.Int32> IdReservaAereo,
			System.Nullable<System.Int32> IdReservaHotel,
			System.Nullable<System.Int32> IdItinerario,
			System.Nullable<System.Int32> IdReservaAlquilerAuto,
			System.String Observaciones)
            : base()
        {

			_IdSolicitudDetalle = IdSolicitudDetalle;
			_IdSolicitud = IdSolicitud;
			_IdSolicitudCategoria = IdSolicitudCategoria;
			_IdReservaAereo = IdReservaAereo;
			_IdReservaHotel = IdReservaHotel;
			_IdItinerario = IdItinerario;
			_IdReservaAlquilerAuto = IdReservaAlquilerAuto;
			_Observaciones = Observaciones;

            if (_SolicitudesEntity == null) _SolicitudesEntity = new Entities.Solicitudes();
if (_SolicitudesCategoriasEntity == null) _SolicitudesCategoriasEntity = new Entities.SolicitudesCategorias();

            Initialized();
        }
        
        #endregion

        #region "Fields"

        /// <summary>
/// 
/// </summary>
protected Entities.Itinerario _ItinerarioEntity;
/// <summary>
/// 
/// </summary>
protected Entities.ReservasAereos _ReservasAereosEntity;
/// <summary>
/// 
/// </summary>
protected Entities.ReservasAlquilerAuto _ReservasAlquilerAutoEntity;
/// <summary>
/// 
/// </summary>
protected Entities.ReservasHotel _ReservasHotelEntity;
/// <summary>
/// 
/// </summary>
protected Entities.Solicitudes _SolicitudesEntity;
/// <summary>
/// 
/// </summary>
protected Entities.SolicitudesCategorias _SolicitudesCategoriasEntity;

        #endregion

        #region "Properties"
        
bool _ItinerarioEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Itinerario ItinerarioEntity
        {
            get
            {
                if (_ItinerarioEntity== null  && this.IdItinerario.HasValue && ! _ItinerarioEntityFetched ) {
_ItinerarioEntityFetched = true;
Entities.Itinerario _ItinerarioEntityTemp = new Entities.Itinerario(this.IdItinerario.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Itinerario));
 _ItinerarioEntity = lazyProvider.GetEntity(typeof(Entities.Itinerario), _ItinerarioEntityTemp) as Entities.Itinerario;
}

                return _ItinerarioEntity;
            }
            set
            {
                base.PropertyModified();
                _ItinerarioEntity = value;
                if (value != null) {
   _IdItinerario = value.IdItinerario;

} else {
   _IdItinerario = null;

}

            }
        }
        
bool _ReservasAereosEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.ReservasAereos ReservasAereosEntity
        {
            get
            {
                if (_ReservasAereosEntity== null  && this.IdReservaAereo.HasValue && ! _ReservasAereosEntityFetched ) {
_ReservasAereosEntityFetched = true;
Entities.ReservasAereos _ReservasAereosEntityTemp = new Entities.ReservasAereos(this.IdReservaAereo.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.ReservasAereos));
 _ReservasAereosEntity = lazyProvider.GetEntity(typeof(Entities.ReservasAereos), _ReservasAereosEntityTemp) as Entities.ReservasAereos;
}

                return _ReservasAereosEntity;
            }
            set
            {
                base.PropertyModified();
                _ReservasAereosEntity = value;
                if (value != null) {
   _IdReservaAereo = value.IdReservaAereo;

} else {
   _IdReservaAereo = null;

}

            }
        }
        
bool _ReservasAlquilerAutoEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.ReservasAlquilerAuto ReservasAlquilerAutoEntity
        {
            get
            {
                if (_ReservasAlquilerAutoEntity== null  && this.IdReservaAlquilerAuto.HasValue && ! _ReservasAlquilerAutoEntityFetched ) {
_ReservasAlquilerAutoEntityFetched = true;
Entities.ReservasAlquilerAuto _ReservasAlquilerAutoEntityTemp = new Entities.ReservasAlquilerAuto(this.IdReservaAlquilerAuto.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.ReservasAlquilerAuto));
 _ReservasAlquilerAutoEntity = lazyProvider.GetEntity(typeof(Entities.ReservasAlquilerAuto), _ReservasAlquilerAutoEntityTemp) as Entities.ReservasAlquilerAuto;
}

                return _ReservasAlquilerAutoEntity;
            }
            set
            {
                base.PropertyModified();
                _ReservasAlquilerAutoEntity = value;
                if (value != null) {
   _IdReservaAlquilerAuto = value.IdReservaAlquilerAuto;

} else {
   _IdReservaAlquilerAuto = null;

}

            }
        }
        
bool _ReservasHotelEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.ReservasHotel ReservasHotelEntity
        {
            get
            {
                if (_ReservasHotelEntity== null  && this.IdReservaHotel.HasValue && ! _ReservasHotelEntityFetched ) {
_ReservasHotelEntityFetched = true;
Entities.ReservasHotel _ReservasHotelEntityTemp = new Entities.ReservasHotel(this.IdReservaHotel.Value); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.ReservasHotel));
 _ReservasHotelEntity = lazyProvider.GetEntity(typeof(Entities.ReservasHotel), _ReservasHotelEntityTemp) as Entities.ReservasHotel;
}

                return _ReservasHotelEntity;
            }
            set
            {
                base.PropertyModified();
                _ReservasHotelEntity = value;
                if (value != null) {
   _IdReservaHotel = value.IdReservaHotel;

} else {
   _IdReservaHotel = null;

}

            }
        }
        
bool _SolicitudesEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.Solicitudes SolicitudesEntity
        {
            get
            {
                if (_SolicitudesEntity== null  && ! _SolicitudesEntityFetched ) {
_SolicitudesEntityFetched = true;
Entities.Solicitudes _SolicitudesEntityTemp = new Entities.Solicitudes(this.IdSolicitud); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.Solicitudes));
 _SolicitudesEntity = lazyProvider.GetEntity(typeof(Entities.Solicitudes), _SolicitudesEntityTemp) as Entities.Solicitudes;
}

                return _SolicitudesEntity;
            }
            set
            {
                base.PropertyModified();
                _SolicitudesEntity = value;
                if (value != null) {
   _IdSolicitud = value.IdSolicitud;

} else {
   _IdSolicitud = System.Int32.MinValue;

}

            }
        }
        
bool _SolicitudesCategoriasEntityFetched;

        /// <summary>
        /// 
        /// </summary>
        public virtual Entities.SolicitudesCategorias SolicitudesCategoriasEntity
        {
            get
            {
                if (_SolicitudesCategoriasEntity== null  && ! _SolicitudesCategoriasEntityFetched ) {
_SolicitudesCategoriasEntityFetched = true;
Entities.SolicitudesCategorias _SolicitudesCategoriasEntityTemp = new Entities.SolicitudesCategorias(this.IdSolicitudCategoria); 
ILazyProvider lazyProvider = LazyProviderFactory.Get(typeof(Entities.SolicitudesCategorias));
 _SolicitudesCategoriasEntity = lazyProvider.GetEntity(typeof(Entities.SolicitudesCategorias), _SolicitudesCategoriasEntityTemp) as Entities.SolicitudesCategorias;
}

                return _SolicitudesCategoriasEntity;
            }
            set
            {
                base.PropertyModified();
                _SolicitudesCategoriasEntity = value;
                if (value != null) {
   _IdSolicitudCategoria = value.IdSolicitudCategoria;

} else {
   _IdSolicitudCategoria = System.Int32.MinValue;

}

            }
        }
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new SolicitudesDetalle OriginalValue()
        {
            return (SolicitudesDetalle)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            SolicitudesDetalle newObject;            
            

            newObject = (SolicitudesDetalle)this.MemberwiseClone();
            // Entities
                         
            if (this._ItinerarioEntity != null)
            {
                newObject._ItinerarioEntity = (Entities.Itinerario)((ICloneable)this._ItinerarioEntity).Clone();
            }
                         
            if (this._ReservasAereosEntity != null)
            {
                newObject._ReservasAereosEntity = (Entities.ReservasAereos)((ICloneable)this._ReservasAereosEntity).Clone();
            }
                         
            if (this._ReservasAlquilerAutoEntity != null)
            {
                newObject._ReservasAlquilerAutoEntity = (Entities.ReservasAlquilerAuto)((ICloneable)this._ReservasAlquilerAutoEntity).Clone();
            }
                         
            if (this._ReservasHotelEntity != null)
            {
                newObject._ReservasHotelEntity = (Entities.ReservasHotel)((ICloneable)this._ReservasHotelEntity).Clone();
            }
                         
            if (this._SolicitudesEntity != null)
            {
                newObject._SolicitudesEntity = (Entities.Solicitudes)((ICloneable)this._SolicitudesEntity).Clone();
            }
                         
            if (this._SolicitudesCategoriasEntity != null)
            {
                newObject._SolicitudesCategoriasEntity = (Entities.SolicitudesCategorias)((ICloneable)this._SolicitudesCategoriasEntity).Clone();
            }
            
            // Colections
            
            // OriginalValue
            SolicitudesDetalle newOriginalValue;
            if (base._OriginalValue != null)
            {
                newOriginalValue = (SolicitudesDetalle)this.OriginalValue().MemberwiseClone();
                // Entities
                             
                if (this.OriginalValue()._ItinerarioEntity != null)
                {
                    newOriginalValue._ItinerarioEntity = (Entities.Itinerario)((ICloneable)this.OriginalValue()._ItinerarioEntity).Clone();
                }
                             
                if (this.OriginalValue()._ReservasAereosEntity != null)
                {
                    newOriginalValue._ReservasAereosEntity = (Entities.ReservasAereos)((ICloneable)this.OriginalValue()._ReservasAereosEntity).Clone();
                }
                             
                if (this.OriginalValue()._ReservasAlquilerAutoEntity != null)
                {
                    newOriginalValue._ReservasAlquilerAutoEntity = (Entities.ReservasAlquilerAuto)((ICloneable)this.OriginalValue()._ReservasAlquilerAutoEntity).Clone();
                }
                             
                if (this.OriginalValue()._ReservasHotelEntity != null)
                {
                    newOriginalValue._ReservasHotelEntity = (Entities.ReservasHotel)((ICloneable)this.OriginalValue()._ReservasHotelEntity).Clone();
                }
                             
                if (this.OriginalValue()._SolicitudesEntity != null)
                {
                    newOriginalValue._SolicitudesEntity = (Entities.Solicitudes)((ICloneable)this.OriginalValue()._SolicitudesEntity).Clone();
                }
                             
                if (this.OriginalValue()._SolicitudesCategoriasEntity != null)
                {
                    newOriginalValue._SolicitudesCategoriasEntity = (Entities.SolicitudesCategorias)((ICloneable)this.OriginalValue()._SolicitudesCategoriasEntity).Clone();
                }
                
                // Colections
                            
                newObject._OriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableSolicitudesDetalle.CompleteEntity(Entities.Itinerario ItinerarioEntity, Entities.ReservasAereos ReservasAereosEntity, Entities.ReservasAlquilerAuto ReservasAlquilerAutoEntity, Entities.ReservasHotel ReservasHotelEntity, Entities.Solicitudes SolicitudesEntity, Entities.SolicitudesCategorias SolicitudesCategoriasEntity)
        {
        _ItinerarioEntity = ItinerarioEntity;
_ReservasAereosEntity = ReservasAereosEntity;
_ReservasAlquilerAutoEntity = ReservasAlquilerAutoEntity;
_ReservasHotelEntity = ReservasHotelEntity;
_SolicitudesEntity = SolicitudesEntity;
_SolicitudesCategoriasEntity = SolicitudesCategoriasEntity;
        }
        
        bool IMappeableSolicitudesDetalle.IsItinerarioEntityNull()
        {
            return (_ItinerarioEntity == null);
        }
        
        bool IMappeableSolicitudesDetalle.IsReservasAereosEntityNull()
        {
            return (_ReservasAereosEntity == null);
        }
        
        bool IMappeableSolicitudesDetalle.IsReservasAlquilerAutoEntityNull()
        {
            return (_ReservasAlquilerAutoEntity == null);
        }
        
        bool IMappeableSolicitudesDetalle.IsReservasHotelEntityNull()
        {
            return (_ReservasHotelEntity == null);
        }
        
        bool IMappeableSolicitudesDetalle.IsSolicitudesEntityNull()
        {
            return (_SolicitudesEntity == null);
        }
        
        bool IMappeableSolicitudesDetalle.IsSolicitudesCategoriasEntityNull()
        {
            return (_SolicitudesCategoriasEntity == null);
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableSolicitudesDetalle.SetFKValuesForChilds(SolicitudesDetalle entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(SolicitudesDetalle other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableSolicitudesDetalle
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity(Entities.Itinerario ItinerarioEntity, Entities.ReservasAereos ReservasAereosEntity, Entities.ReservasAlquilerAuto ReservasAlquilerAutoEntity, Entities.ReservasHotel ReservasHotelEntity, Entities.Solicitudes SolicitudesEntity, Entities.SolicitudesCategorias SolicitudesCategoriasEntity);
        
        /// <summary>
        /// 
        /// </summary>
        bool IsItinerarioEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsReservasAereosEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsReservasAlquilerAutoEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsReservasHotelEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsSolicitudesEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        bool IsSolicitudesCategoriasEntityNull();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(SolicitudesDetalle entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class SolicitudesDetalleList : ObjectList<SolicitudesDetalle>
    {
    }
}
namespace serin_viaticosRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class SolicitudesDetalleListView
        : ObjectListView<Entities.SolicitudesDetalle>
    {
        /// <summary>
        /// 
        /// </summary>
        public SolicitudesDetalleListView(Entities.SolicitudesDetalleList list): base(list)
        {
        }
    }
}


